{% trans_default_domain 'cocorico_user' %}

{% if form_login %}
    {#{{ form_errors(form_login) }}#}
    {% set login_class= " active" %}
    {% set register_class= "" %}
{% endif %}

{% if form_registration %}
    {#{{ form_errors(form_registration) }}#}
    {% set login_class= "" %}
    {% set register_class= " active" %}
{% endif %}



{#Registration Form#}
{% if form_registration %}
    {% include '@CocoricoUser/Frontend/Common/_register.html.twig'  with {
    'form_registration' : form_registration,
    'register_class' : register_class
    } only %}
{% endif %}

{#Login Form#}
{% if form_login %}
    {% include '@CocoricoUser/Frontend/Common/_login.html.twig'  with {
    'form_login' : form_login,
    'login_class' : login_class
    } only %}
{% endif %}

{#Redirect after login on referer except for some routes #}
{% set targetUrl =  app.session.get('_security.main.target_path')|default('') %}
{% if targetUrl %}
    <input type="hidden" name="redirect_to" value="{{ targetUrl }}"/>
{% elseif app.request.uri != app.request.headers.get('referer') and app.request.get('_route') not in ['cocorico_listing_availabilities'] %}
    <input type="hidden" name="redirect_to" value="{{ app.request.headers.get('referer') }}"/>
{% endif %}

{#Facebook #}
{#
{% include '@CocoricoCore/Frontend/Common/js/_facebook_js.html.twig' only %}
#}

<script>
    console.log('OK');
    var INFO_HIDDEN = false;
    var CURRENT_PERSON = false;
    document.addEventListener("DOMContentLoaded", function(){
        //User type (legal or natural)
        $('[data-id=person-type] input').each(function (k, personType) {
            toggleFields(personType);

            $(personType).on('click', function () {
                toggleFields(this);
            });
        });

         /**
          *
          * Toggle input fields based on person type
          */
         function toggleFields(personType) {
             if (!$(personType).is(':checked')) {
                 return;
             }
             let cursor = $(personType).val();
             CURRENT_PERSON = cursor;
             toggleFieldsDisplay(cursor);
         }

         function toggleFieldsDisplay(cursor) {
 
             // See User entity for type/value relationships
             console.log(cursor);
             const type_classic = '3';
             const type_inclusive = '4';
             const type_partner = '6';
             let key = '';

             // Hide all "only" fields
             $('[data-only]').hide().prop('required', false).removeClass('required');

             switch (cursor) {
                 case type_classic:
                     key = 'classic';
                     break;
                 case type_inclusive:
                     key = 'inclusive';
                     break;
                 case type_partner:
                     key = 'partner';
                     break;
             }
             console.log('key:', key);

             $('[data-only~="' + key + '"]').show();
             $('[data-only~="' + key + '-required"]').show().prop('required', true).addClass('required');
         }

    //     //Errors
    //     $('#form-registerlogin form').parsley({
    //         errorsContainer: function (ParsleyField) {
    //             return ParsleyField.$element
    //                     .parents('.field-row.validate-row').find('.error-container');
    //         },
    //         errorsWrapper: '<div class="errors"></div>',
    //         errorTemplate: '<span class="icon-error-field"></span>'
    //     });

    //     //Activate login tab on page load if login errors
    //     if ($("#login-errors-wrapper div.flashes").length) {
    //         $('#login-tab').tab('show');
    //     }

    //     //Empty login fields on subscribe tab shown
    //     $('#login-register-tabs a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
    //         if (e.target.id == "register-tab") {
    //             $("#profile input[type=text]").val('');
    //         }
    //     });
    });
</script>
