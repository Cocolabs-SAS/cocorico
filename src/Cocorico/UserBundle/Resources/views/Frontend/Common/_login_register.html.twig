{% trans_default_domain 'cocorico_user' %}

{% if form_login %}
    {#{{ form_errors(form_login) }}#}
    {% set login_class= " active" %}
    {% set register_class= "" %}
{% endif %}

{% if form_registration %}
    {#{{ form_errors(form_registration) }}#}
    {% set login_class= "" %}
    {% set register_class= " active" %}
{% endif %}



{#Registration Form#}
{% if form_registration %}
    {% include '@CocoricoUser/Frontend/Common/_register.html.twig'  with {
    'form_registration' : form_registration,
    'register_class' : register_class
    } only %}
{% endif %}

{#Login Form#}
{% if form_login %}
    {% include '@CocoricoUser/Frontend/Common/_login.html.twig'  with {
    'form_login' : form_login,
    'login_class' : login_class
    } only %}
{% endif %}

{#Redirect after login on referer except for some routes #}
{% set targetUrl =  app.session.get('_security.main.target_path')|default('') %}
{% if targetUrl %}
    <input type="hidden" name="redirect_to" value="{{ targetUrl }}"/>
{% elseif app.request.uri != app.request.headers.get('referer') and app.request.get('_route') not in ['cocorico_listing_availabilities'] %}
    <input type="hidden" name="redirect_to" value="{{ app.request.headers.get('referer') }}"/>
{% endif %}

{#Facebook #}
{#
{% include '@CocoricoCore/Frontend/Common/js/_facebook_js.html.twig' only %}
#}

<script>
    var INFO_HIDDEN = false;
    var CURRENT_PERSON = false;
    $(function () {
        //User type (legal or natural)
        $('[data-id=person-type] input').each(function (k, personType) {
            // toggleCompanyName(personType);
            // toggleLabels(personType);
            toggleFields(personType);
            $('.itou-info-hidden').css('display', 'none');

            $(personType).on('click', function () {
                // toggleCompanyName(this);
                // toggleLabels(this);
                toggleFields(this);
            });
        });

        $('.itou-fieldgroup input').on('click', () => {
            if (INFO_HIDDEN) { return; }
            INFO_HIDDEN = true;
            toggleFieldsDisplay(CURRENT_PERSON);
        });

        /**
         *
         * Toggle input fields based on person type
         */
        function toggleFields(personType) {
            if (!$(personType).is(':checked')) {
                return;
            }
            let cursor = $(personType).val();
            CURRENT_PERSON = cursor;
            toggleFieldsDisplay(cursor);
        }

        function toggleFieldsDisplay(cursor) {
 
            // See User entity for type/value relationships
            const type_classic = 3;
            const type_inclusive = 4;

            // Hide fields
            if (cursor != type_classic) {
                $('[data-id=only-classic]').hide();
            }
            else if (cursor != type_inclusive) {
                $('[data-id^=only-inclusive]').hide();
                $('[data-id^=only-inclusive] input').prop('required', false).removeClass('required');;
            }

            // show fields
            if (cursor == type_classic) {
                $('[data-id=only-classic]').show();
            }
            else if (cursor == type_inclusive) {
                $('[data-id^=only-inclusive]').show();
                $('[data-id=only-inclusive-required] input').prop('required', true).addClass('required');
            }           

            if (!INFO_HIDDEN) {
                $('.itou-info-hidden').css('display', 'none');
            }

        }

        /**
         * Toggle user company field depending on type user
         * @param personType
         */
        function toggleCompanyName(personType) {
            if (!$(personType).is(':checked')) {
                return;
            }

            // Hard code person type switch, not nice !
            if ($(personType).val() >= 2) {//legal
                $('[data-id=company-name]').show();
                $('[data-id=company-name] input').addClass('required');
            } else {//natural
                $('[data-id=company-name]').hide();
                $('[data-id=company-name] input').removeClass('required');
            }
        }

        /**
         * Toggle labels fields depending on type user
         * @param personType
         */
        function toggleLabels(personType) {
            if (!$(personType).is(':checked')) {
                return;
            }

            if ($(personType).val() >= 2) {//legal
                $('[data-label-legal]').each(function (k, label) {
                    $(this).attr('data-label-natural', $(this).text());//memorize label natural text
                    $(this).text($(this).data('label-legal'));//change label text to legal  text

                    if ($('#' + $(this).attr('for')).attr('required') || $(this).hasClass('required')) {//add * for required fields
                        $(this).text($(this).text() + ' *');
                    }
                });
            } else {//natural
                $('[data-label-legal]').each(function (k, label) {
                    $(this).text($(this).data('label-natural'));//change label text to natural  text
                });
            }
        }

        //Errors
        $('#form-registerlogin form').parsley({
            errorsContainer: function (ParsleyField) {
                return ParsleyField.$element
                        .parents('.field-row.validate-row').find('.error-container');
            },
            errorsWrapper: '<div class="errors"></div>',
            errorTemplate: '<span class="icon-error-field"></span>'
        });

        //Activate login tab on page load if login errors
        if ($("#login-errors-wrapper div.flashes").length) {
            $('#login-tab').tab('show');
        }

        //Empty login fields on subscribe tab shown
        $('#login-register-tabs a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            if (e.target.id == "register-tab") {
                $("#profile input[type=text]").val('');
            }
        });
    });
</script>
