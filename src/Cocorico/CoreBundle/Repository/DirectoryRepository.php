<?php

namespace Cocorico\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;

/**
 * DirectoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DirectoryRepository extends EntityRepository
{

    /**
     * @param $userId
     */
    public function findByUser($userId)
    {
        // FIXME: Is this even used ?
        $resp = $this->getFindByC4Id($userId)->getQuery()->getResult();
        return count($resp) > 0 ? $resp[0] : false;
    }

    public function getFindQueryBuilder()
    {
        $qB = $this->createQueryBuilder('d');
        $qB->addSelect("partial dlcat.{id, directory, category}")
           ->addSelect("partial u.{id}")
           ->addSelect("partial i.{id, name}")
           //->addSelect("partial ca.{id, lft, lvl, rgt, root}")
           //->addSelect("partial cat.{id, locale, name}")
           ->leftJoin('d.directoryListingCategories', 'dlcat')
           ->leftJoin('d.users', 'u')
           // ->leftJoin('dlcat.category', 'ca')
           // ->leftJoin('ca.translations', 'cat', Query\Expr\Join::WITH, 'cat.locale = :locale')
           ->leftJoin('d.images', 'i');
           //->setParameter('locale', 'fr');

        return $qB;
    }

    public function getSome($limit= 10, $offset=0)
    {
        # Using a hidden CASE to boost final order
        $qB = $this->getFindQueryBuilder();
        $qB->setMaxResults($limit)
           ->setFirstResult($offset)
           ->addSelect("(CASE 
            WHEN u.id IS NULL THEN 0
            ELSE 1
           END) AS HIDDEN BOOST_ORDER")
           ->addOrderBy("BOOST_ORDER", "DESC")
           ->addOrderBy("d.name", "ASC")
           ->andwhere('d.nature != \'n/a\'')
           ->andwhere('d.latitude is not null')
           ->andwhere('d.isDelisted = false');

        return $qB;
    }

    public function getAll()
    {
        $qB = $this->getFindQueryBuilder();
        $qB->orderBy('d.name', 'asc')
           ->andwhere('d.nature != \'n/a\'')
           ->andwhere('d.isDelisted = false');

        return $qB;
    }

    public function getFindByC4Id($C4Id)
    {
        $qB = $this->getFindQueryBuilder();
        $qB->andwhere('d.c4Id = :c4Id')
           ->setParameter('c4Id', $C4Id);

        return $qB;
    }

    public function getFindBySiret($Siret)
    {
        $qB = $this->getFindQueryBuilder();
        $qB->andwhere('d.siret = :siret')
           ->setParameter('siret', $siret);

        return $qB;
    }

    public function getFindBySiretSiren($Siretn)
    {
        $qB = $this->getFindQueryBuilder();
        $qB->andwhere('d.siret = :siret')
           ->orWhere('d.siret like :siren')
           ->setParameter('siret', $Siretn)
           ->setParameter('siren', $Siretn.'%');

        return $qB;
    }

    public function getFindByUser($user)
    {
        $qB = $this->getFindQueryBuilder();
        // FIXME: Do some real filtering here, please !
        $qB->leftJoin('d.users', 'u')
           ->andwhere("u = :user")
           ->setParameter("user", $user);

        return $qB;
    }

    public function getFull()
    {
        $qB = $this->getFindQueryBuilder();
        $qB->orderBy('d.name', 'asc');

        return $qB;
    }
}
